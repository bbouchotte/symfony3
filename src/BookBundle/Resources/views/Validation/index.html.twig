{% extends 'BookBundle::base.html.twig' %}

{% block body_content %}

	<h1>Validation</h1>
	<pre>// src/AppBundle/Entity/Author.php
namespace ValidationBundle\Entity;
use Symfony\Component\Validator\Constraints as Assert;

class Author {
    /**
     * @Assert\NotBlank()
     */
    public $name;
}</pre>
	<pre>use Symfony\Component\HttpFoundation\Response;
use AppBundle\Entity\Author;

public function authorAction() {
    $author = new Author();
    // ... do something to the $author object

    $validator = $this->get('validator');
    $errors = $validator->validate($author);

    if (count($errors) > 0) {
        // Uses a __toString method on the $errors variable which is a object. This gives us a nice string for debugging.
        $errorsString = (string) $errors;
        return new Response($errorsString);
    }
    return new Response('The author is valid! Yes!');
}</pre>
	<p>
		<a href="{{ path('validatorService') }}">Exercice</a>
	</p>

	<p>Each validation error (called a "constraint violation"), is represented by a ConstraintViolation object.</p>

	<h4>Validation and Forms</h4>
	<pre>use AppBundle\Entity\Author;
use AppBundle\Form\AuthorType;
use Symfony\Component\HttpFoundation\Request;
// ...
public function updateAction(Request $request) {
    $author = new Author();
    $form = $this->createForm(AuthorType::class, $author);
    $form->handleRequest($request);
    if ($form->isValid()) {
        // the validation passed, do something with the $author object
        return $this->redirectToRoute(...);
    }
    return $this->render('author/form.html.twig', array(
        'form' => $form->createView(),
    ));
}</pre>

	<h4>Configutation</h4>
	<p>The Symfony validator is enabled by default</p>
	<pre># app/config/config.yml
framework:
    validation: { enable_annotations: true }</pre>
    
    <h4>Constraints</h4>
    <p>
		<a href="https://symfony.com/doc/current/reference/constraints/NotBlank.html" target="_blank">
    		NotBlank
    	</a>, 
		<a href="https://symfony.com/doc/current/reference/constraints/Blank.html" target="_blank">
    		Blank
    	</a>, 
    	<a href="https://symfony.com/doc/current/reference/constraints/NotNull.html" target="_blank">
    		NotNull
    	</a>, 
    	<a href="https://symfony.com/doc/current/reference/constraints/IsNull.html" target="_blank">
    		IsNull
    	</a>,
    	<a href="https://symfony.com/doc/current/reference/constraints/IsTrue.html" target="_blank">
    		IsTrue
    	</a>, 
	    <a href="https://symfony.com/doc/current/reference/constraints/IsFalse.html" target="_blank">
    		IsFalse
    	</a>, 
		<a href="https://symfony.com/doc/current/reference/constraints/Type.html" target="_blank">
    		Type
    	</a>.
	</p>      
    
    <p>
	    <a href="https://symfony.com/doc/current/book/validation.html#string-constraints" target="_blank">
	    	String Constraints
	    </a>: Email, Length, Url, Regex, Ip, Uuid</p>
    <p>
	    <a href="https://symfony.com/doc/current/reference/constraints/Range.html" target="_blank">
	    	Number Constraints : Range.
	    </a>
	</p>
	<p>
	    <a href="https://symfony.com/doc/current/book/validation.html#comparison-constraints" target="_blank">
	    	Comparison Constraints
	    </a>: EqualTo, NotEqualTo, IdenticalTo, NotIdenticalTo, LessThan, LessThanOrEqual, GreaterThan, GreaterThanOrEqual.</p>
	<p>
		<a href="https://symfony.com/doc/current/book/validation.html#date-constraints" target="_blank">
			Date Constraints
		</a>: Date, DateTime, Time.
	</p>
	<p>
		<a href="https://symfony.com/doc/current/book/validation.html#collection-constraints" target="_blank">
			Collection Constraints
		</a>: Choice, Collection, Count, UniqueEntity, Language, Locale, Country.
	</p>
	<p>
		<a href="https://symfony.com/doc/current/book/validation.html#file-constraints" target="_blank">
			File Constraints
		</a>: File, Image.
	</p>
	<p>
		<a href="" target="_blank">
			Financial and other Number Constraints
		</a>: Bic, CardScheme, Currency, Luhn, Iban, Isbn, Issn.
	</p>
	<p>
		<a href="https://symfony.com/doc/current/book/validation.html#other-constraints" target="_bank">
			Other Constraints
		</a>: Callback, Expression, All, UserPassword, Valid.
	</p>
	<p>
		<a href="https://symfony.com/doc/current/cookbook/validation/custom_constraint.html" target="_blank">
			How to Create a custom Validation Constraint
		</a>
	</p>
	<h4>Constraint Configuration</h4>
	<pre>     * @Assert\Choice(
     *     choices = { "male", "female", "other" },
     *     message = "Choose a valid gender."
     * )</pre>
    <pre>     * @Assert\Choice({"male", "female", "other"})</pre>
     
    <a href="https://symfony.com/doc/current/book/translation.html#book-translation-constraint-messages" target="blank">
    	<h4>Translation Constraint Messages</h4>
    </a>
    <a href="{{ path('translation') }}">Translation</a>																																																																						
	
	<a href="https://symfony.com/doc/current/book/validation.html#constraint-targets" target="_blank">
		<h4>Constraint Targets</h4>
	</a>
	<p>Constraints can be applied to:</p>
	<ul>
		<li>a class property (most common and easy ti use),</li>
		<li>or a public getter method (allows you to specify more complex validation rules).</li>
	</ul>
    
    <h5>Properties</h5>
    <pre>    /**
     * @Assert\NotBlank()
     * @Assert\Length(min=3)
     */
    private $firstName;</pre>
    
    <h5>Getters</h5>
    <p>
    	Constraints can be applied to the return value of a method whose name starts with "get", "is" or "has"
    	<br />
		It allows you to validate your object dynamically.
    </p>
    <pre>use Symfony\Component\Validator\Constraints as Assert;
class Author {
    /**
     * @Assert\IsTrue(message = "The password cannot match your first name")
     */
    public function isPasswordLegal()     {
        return $this->firstName !== $this->password;
    }
}</pre>
	<h5>Classes</h5>
	<p>For example, the 
		<a href="https://symfony.com/doc/current/reference/constraints/Callback.html" target="_blank">
			Callback
		</a>
		 constraint is a generic constraint that's applied to the class itself.
	</p>
	
	<h5>Validation Groups</h5>
	<pre>// src/AppBundle/Entity/User.php
namespace AppBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Validator\Constraints as Assert;

class User implements UserInterface {
    /**
     * @Assert\Email(groups={"registration"})
     */
    private $email;

    /**
     * @Assert\NotBlank(groups={"registration"})
     * @Assert\Length(min=7, groups={"registration"})
     */
    private $password;

    /**
     * @Assert\Length(min=2)
     */
    private $city;
}</pre>
	<p>With this configuration, there are three validation groups:</p>
	<p>default, user (objects), registration.</p>
	<pre>$errors = $validator->validate($author, null, array('registration'));</pre>
	<p>
		<a href="https://symfony.com/doc/current/book/forms.html#book-forms-validation-groups" target="_blank">
			Validation Groups
		</a>
	</p>
	
	<h4>Group Sequence</h4>
	<pre>namespace AppBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * @Assert\GroupSequence({"User", "Strict"})
 */
class User implements UserInterface {
    /**
     * @Assert\NotBlank
     */
    private $username;
...
    /**
     * @Assert\IsTrue(message="The password cannot match your username", groups={"Strict"})
     */
    public function isPasswordLegal() {
        return ($this->username !== $this->password);
...</pre>

	<a href="https://symfony.com/doc/current/book/validation.html#group-sequence-providers" target="_blank">
		<h4>Group Sequence Providers</h4>
	</a>
	<pre>namespace AppBundle\Entity;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\GroupSequenceProviderInterface;
/**
 * @Assert\GroupSequenceProvider
 */
class User implements GroupSequenceProviderInterface {
    /**
     * @Assert\NotBlank()
     */
    private $name;

    /**
     * @Assert\CardScheme(
     *     schemes={"VISA"},
     *     groups={"Premium"},
     * )
     */
    private $creditCard;

    public function getGroupSequence()
    {
        $groups = array('User');

        if ($this->isPremium()) {
            $groups[] = 'Premium';
        }

        return $groups;
    }
}</pre>

	<h4>Validating Values and Arrays</h4>
	<pre>    /**
     * @Route("/addEmail/{email}", name="addEmail")
     */
    public function addEmailAction($email)     {
    	$emailConstraint = new Assert\Email();
    	// all constraint "options" can be set this way
    	$emailConstraint->message = 'Invalid email address';
    	
    	// use the validator to validate the value
    	$errorList = $this->get('validator')->validate(
    			$email,
    			$emailConstraint
    			);
    
    	if (0 === count($errorList)) {
    		return new Response('Email is valid.');
    	} else {
    		$errorMessage = $errorList[0]->getMessage();
    		return new Response('Email isn\'t valid.<br />' . var_dump($errorList));
    	}
    }</pre>
    <p>Full list: <a href="https://symfony.com/doc/current/reference/constraints.html" target="_blank">
    	Constraints reference</a>.
    </p>
    
    <h4>Learn more from the Cookbook</h4>
    <p>
    	<a href="https://symfony.com/doc/current/cookbook/validation/custom_constraint.html" target="_blank">
    		How to Create a custom Validation Constraint
    	</a>
    </p>
    <hr>
    
	
	



{% endblock %}